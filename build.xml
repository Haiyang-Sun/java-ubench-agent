<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2014 Charles University in Prague
  - Copyright 2014 Vojtech Horky
  - 
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -->
<project basedir="." name="Microbenchmarking agent for Java" default="main">
	<property file="local-settings.ini" />
	
	<property environment="env" />

	<property name="dist.name" value="ubench-agent" />

	<property name="java.src.dir" value="src/java" />
	<property name="agent.src.dir" value="src/c" />
	<property name="demo.src.dir" value="src/demo-java" />
	<property name="java.test.src.dir" value="src/test-java" />

	<property name="build.dir" location="out" />
	<property name="classes.build.dir" location="${build.dir}/classes" />
	<property name="demo.classes.build.dir" location="${build.dir}/demo-classes" />
	<property name="test.classes.build.dir" location="${build.dir}/test-classes" />
	<property name="test.results.dir" value="${build.dir}/test-results" />
	<property name="agent.build.dir" location="${build.dir}/agent/" />
	<property name="lib.build.dir" location="${build.dir}/lib/" />
	
	<property name="junit.jar.path" value="lib/junit-4.11.jar" />
	<property name="hamcrest.jar.path" value="lib/hamcrest-core.jar" />
	
	<property name="agent.cc" value="gcc" />
	
	
	<!--
		Determine features (capabilities) of the agent based
		on available libraries or on which platform we are
		operating.
	-->
	<condition property="agent.feature.has.papi">
		<and>
			<os family="unix" />
			<or>
				<available file="libpapi.so" filepath="/usr/lib" />
				<available file="libpapi.so" filepath="/usr/lib64" />
				<available file="libpapi.so" filepath="/usr/lib/x86_64-linux-gnu" />
			</or>
		</and>
	</condition>
	<condition property="agent.feature.has.getrusage">
		<os name="Linux" />
	</condition>
	<condition property="agent.feature.has.timespec">
		<os name="Linux" />
	</condition>
	<!-- Only MSVC on Windows -->
	<condition property="agent.features.has.native.windows">
		<and>
			<os family="windows" />
			<equals arg1="${agent.cc}" arg2="msvc" />
		</and>
	</condition>
	
	
	
	<!--
		Prepare some compiler/linker settings.
	-->
	<property name="agent.cc.warnings" value="diagnostic" />
	
	<!-- Helper properties to check for compiler -->
	<condition property="agent.cc.is.gcc">
		<equals arg1="${agent.cc}" arg2="gcc" />
	</condition>
	<condition property="agent.cc.is.msvc">
		<equals arg1="${agent.cc}" arg2="msvc" />
	</condition>
		
	
	<!-- Agent file naming -->
	<condition property="agent.filename" value="libubench-agent.so">
		<os family="unix" />
	</condition>
	<condition property="agent.filename" value="ubench-agent.dll">
		<os family="windows" />
	</condition>
	<property name="agent.path"
		location="${agent.build.dir}${file.separator}${agent.filename}" />
	
	<!-- Java include paths -->
	<pathconvert property="agent.cc.java.jni.h.path" setonempty="false">
		<!--
			Try to find jni.h in known locations.
			
			We first try $JAVA_HOME (%JAVA_HOME%) if set (that
			shall take care of custom locations or when the
			user wants to compile with a specific version of JDK).
			Then we try ${java.home} that usually points to JRE
			that could be inside JDK. After that, we go through
			list of typical locations in various distributions.
			
			If your distribution uses different location, feel
			free to add it here (but preferably only directories
			without build versions, such as/usr/java/jdk1.7 but
			not /usr/java/jdk1.7.0_55/).
			
			If you have a custom location, use local-settings.ini
			to specify the exact path as a value of the
			agent.cc.java.include property.
		-->
		<first>
			<restrict>
				<exists />
				<union>					
					<filelist dir="${env.JAVA_HOME}${file.separator}include" files="jni.h" />
					<filelist dir="${java.home}${file.separator}..${file.separator}include" files="jni.h" />
					<filelist dir="/usr/lib/jvm/default/include/" files="jni.h" />
					<filelist dir="/usr/lib/jvm/java/include" files="jni.h" />
					<filelist dir="/usr/java/default/include" files="jni.h" />
					<filelist dir="/usr/java/latest/include" files="jni.h" />
				</union>
			</restrict>
		</first>
	</pathconvert>
	<fail unless="agent.cc.java.jni.h.path"
		message="Failed to locate JDK directory with C headers (set JAVA_HOME)."/>
	
	<dirname property="agent.cc.java.include"
		file="${agent.cc.java.jni.h.path}" />
	
	<condition property="agent.cc.java.os.include"
			value="${agent.cc.java.include}${file.separator}linux">
		<os name="Linux" />
	</condition>
	<condition property="agent.cc.java.os.include"
			value="${agent.cc.java.include}${file.separator}win32">
		<os family="windows" />
	</condition>
	
	<!-- PAPI support and other has.* settings -->
	<condition property="agent.link.papi" value="-lpapi" else="">
		<isset property="agent.feature.has.papi" />
	</condition>
	<condition property="agent.cc.papi" value="-DHAS_PAPI" else="">
		<isset property="agent.feature.has.papi" />
	</condition>
	<condition property="agent.cc.getrusage" value="-DHAS_GETRUSAGE" else="">
		<isset property="agent.feature.has.getrusage" />
	</condition>
	<condition property="agent.cc.timespec" value="-DHAS_TIMESPEC" else="">
		<isset property="agent.feature.has.timespec" />
	</condition>
	<condition property="agent.link.librt" value="-lrt" else="">
		<os name="Linux" />
	</condition>
	<condition property="agent.cc.native.windows" value="-DHAS_QUERY_PERFORMANCE_COUNTER" else="">
		<isset property="agent.features.has.native.windows" />
	</condition>
	
	
	<!-- Warning-related compiler flags -->
	<condition property="agent.gcc.warn.flags" value="-Wall -Wextra -Wno-unknown-pragmas">
		<equals arg1="${agent.cc.warnings}" arg2="diagnostic" />
	</condition>
	<condition property="agent.gcc.warn.flags" value="-Wall -Wno-unknown-pragmas">
		<equals arg1="${agent.cc.warnings}" arg2="default" />
	</condition>
	<condition property="agent.gcc.warn.flags" value="-Wall -Wextra -Werror -Wno-unknown-pragmas">
		<equals arg1="${agent.cc.warnings}" arg2="aserror" />
	</condition>
	<property name="agent.gcc.warn.flags" value="" />
	
	<condition property="agent.msvc.warn.flags" value="/Wall /wd4100 /wd4820">
		<equals arg1="${agent.cc.warnings}" arg2="diagnostic" />
	</condition>
	<condition property="agent.msvc.warn.flags" value="/W3">
		<equals arg1="${agent.cc.warnings}" arg2="default" />
	</condition>
	<condition property="agent.msvc.warn.flags" value="/Wall /WX /wd4100 /wd4820">
		<equals arg1="${agent.cc.warnings}" arg2="aserror" />
	</condition>
	<property name="agent.msvc.warn.flags" value="" />
	
	<!-- Determine when recompilation is necessary -->
	<condition property="agent.gcc.recompilation.necessary">
		<or>
			<and>
				<isset property="agent.cc.is.gcc" />
				<not><and>
					<uptodate targetfile="${agent.path}">
						<srcfiles
							dir="${agent.build.dir}"
							includes="*.o"
						/>
					</uptodate>
					<uptodate>
						<srcfiles
							dir="${agent.src.dir}"
							includes="*.c"
						/>
						<mapper type="glob"
							from="*.c"
							to="${agent.build.dir}${file.separator}*.o" />
					</uptodate>
				</and></not>
			</and>
			<contains
				string="${ant.project.invoked-targets}"
				substring="clean"
			/>
		</or>
	</condition>
	<condition property="agent.msvc.recompilation.necessary">
		<or>
    		<and>
    			<isset property="agent.cc.is.msvc" />
    			<not><and>
    				<uptodate targetfile="${agent.path}">
    					<srcfiles
    						dir="${agent.build.dir}"
    						includes="*.obj"
    					/>
    				</uptodate>
    				<uptodate>
    					<srcfiles
    						dir="${agent.src.dir}"
    						includes="*.c"
    					/>
    					<mapper type="glob"
    						from="*.c"
    						to="${agent.build.dir}${file.separator}*.obj" />
    				</uptodate>
    			</and></not>
    		</and>
			<contains
				string="${ant.project.invoked-targets}"
				substring="clean"
			/>
		</or>
	</condition>
	
	
	
	
	<target name="print-config"
			description="Print current configuration (include paths, compiler, ...)."
		>
		<echo message="Used Java version: ${ant.java.version}" />
		<echo message="Java C headers in: ${agent.cc.java.include}" />
		<echo message="  Used C compiler: ${agent.cc}" />
	</target>
	
	<target name="print-properties">
		<echoproperties format="text" />
	</target>
	
	<target name="main"
			depends="compile"
			description="Default target: compile everything."
		>
	</target>

	<target name="compile"
			depends="compile-java,compile-agent"
			description="Compile everything."
		>
	</target>

	<target name="compile-java"
			description="Compile Java sources."
		>
		<mkdir dir="${classes.build.dir}" />
		<javac 
				destdir="${classes.build.dir}"
				debug="true"
				includeantruntime="false">
			<src path="${java.src.dir}" />
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="compile-agent"
			depends="compile-agent-maybe-gcc,compile-agent-maybe-msvc"
			description="Compile the C agent."
		>
	</target>
	
	<target name="compile-agent-prepare-headers"
			depends="compile-java"
			description="Generate JNI headers."
		>
		<mkdir dir="${agent.build.dir}" />
		<javah
				destdir="${agent.build.dir}"
				classpath="${classes.build.dir}">
			<class name="cz.cuni.mff.d3s.perf.CompilationCounter" />
			<class name="cz.cuni.mff.d3s.perf.Benchmark" />
			<class name="cz.cuni.mff.d3s.perf.MultiContextBenchmark" />
			<class name="cz.cuni.mff.d3s.perf.OverheadEstimations" />
		</javah>
	</target>
	
	<target name="compile-agent-maybe-gcc" if="agent.cc.is.gcc">
		<antcall target="compile-agent-gcc" />
	</target>
	
	<target name="compile-agent-gcc"
			depends="compile-agent-prepare-headers"
			if="agent.gcc.recompilation.necessary"
		>
		<apply
				executable="gcc"
				failonerror="true"
				dest="${agent.build.dir}"
				parallel="false"
				verbose="true">
			<arg value="-c" />
			<arg value="-I${agent.build.dir}" />
			<arg value="-I${agent.cc.java.include}" />
			<arg value="-I${agent.cc.java.os.include}" />
			<arg value="-fPIC" />
			<arg line="${agent.cc.papi}" />
			<arg line="${agent.cc.getrusage}" />
			<arg line="${agent.cc.timespec}" />
			<arg line="${agent.gcc.warn.flags}" />
			<arg value="-o"/>
			<targetfile />
			<srcfile />
			<fileset dir="${agent.src.dir}" includes="*.c" />
			<mapper type="glob" from="*.c" to="*.o" />
		</apply>
		<apply
				executable="ld"
				failonerror="true"
				parallel="true"
				verbose="true">
			<arg value="-shared" />
			<arg value="-fPIC" />
			<arg line="${agent.link.papi}" />
			<arg line="${agent.link.librt}" />
			<arg value="-o" />
			<arg file="${agent.path}" />
			<srcfile />
			<fileset dir="${agent.build.dir}" includes="*.o" />
		</apply>
	</target>
	
	<target name="compile-agent-maybe-msvc" if="agent.cc.is.msvc">
		<antcall target="compile-agent-msvc" />
	</target>
	
	<target name="compile-agent-msvc"
			depends="compile-agent-prepare-headers"
			if="agent.msvc.recompilation.necessary"
		>
		<apply
				executable="cl.exe"
				failonerror="true"
				dest="${agent.build.dir}"
				parallel="false"
				verbose="true">
			<arg value="/c" />
			<arg value="/I${agent.build.dir}" />
			<arg value="/I${agent.cc.java.include}" />
			<arg value="/I${agent.cc.java.os.include}" />
			<arg line="${agent.msvc.warn.flags}" />
			<arg line="${agent.cc.native.windows}" />
			<arg value="/Fo${agent.build.dir}${file.separator}"/>
			<arg value="/TC" />
			<srcfile />
			<fileset dir="${agent.src.dir}" includes="*.c" />
			<mapper type="glob" from="*.c" to="*.obj" />
		</apply>
		<apply
				executable="link.exe"
				failonerror="true"
				parallel="true"
				verbose="true">
			<arg value="/DLL" />
			<arg line="/DEF:${agent.src.dir}${file.separator}agent.def" />
			<arg value="/OUT:${agent.path}" />
			<srcfile />
			<fileset dir="${agent.build.dir}" includes="*.obj" />
		</apply>
	</target>
	
	<target name="lib"
			description="Create the library, that is JAR and C-agent."
			depends="compile"
		>
		<mkdir dir="${lib.build.dir}" />
		<jar
				destfile="${lib.build.dir}${file.separator}ubench-agent.jar"
				basedir="${classes.build.dir}"
			>
		</jar>
		<copy file="${agent.path}" todir="${lib.build.dir}" />
	</target>
	
	<target name="compile-demo"
			description="Compile all the demo code."
			depends="compile"
		>
		<mkdir dir="${demo.classes.build.dir}" />
		<javac 
				destdir="${demo.classes.build.dir}"
				debug="true"
				includeantruntime="false">
			<src path="${demo.src.dir}" />
			<classpath>
				<pathelement path="${classes.build.dir}" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="compile-test"
			description="Compile all the test code."
		>
		<mkdir dir="${test.classes.build.dir}" />
		<javac 
				destdir="${test.classes.build.dir}"
				debug="true"
				includeantruntime="false">
			<src path="${java.test.src.dir}" />
			<classpath>
				<pathelement path="${classes.build.dir}" />
				<pathelement path="${junit.jar.path}" />
				<pathelement path="${hamcrest.jar.path}" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<macrodef name="self-test">
		<attribute name="classname" default="mixed" />
		<attribute name="jvmarg" default="-Xmixed" />
		<attribute name="progarg" default="mixed" />
			
		<sequential>
			<java
					classname="@{classname}"
					fork="true"
					failonerror="true">
				<classpath>
					<pathelement path="${classes.build.dir}" />
					<pathelement path="${test.classes.build.dir}" />
				</classpath>
				<jvmarg value="-agentpath:${agent.path}" />
				<jvmarg value="@{jvmarg}" />
				<arg value="@{progarg}" />
			</java>
		</sequential>
	</macrodef>

	<target name="test"
			depends="compile,compile-test"
			description="Run simple self-tests (obsoleted)."
		>
		<self-test
			classname="cz.cuni.mff.d3s.perf.CompilationCounterTest"
			jvmarg="-Xmixed"
			progarg="mixed" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.CompilationCounterTest"
			jvmarg="-Xint"
			progarg="int" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.BenchmarkTest"
			/>
				
		<echo level="info" message="All tests passed." />
	</target>

	<target name="test-context"
			depends="compile,compile-test"
			description="Run simple self-tests (obsoleted)."
		>
		<self-test
			classname="cz.cuni.mff.d3s.perf.MultiContextCompilationCounterTest"
			jvmarg="-Xmixed"
			progarg="mixed" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.MultiContextCompilationCounterTest"
			jvmarg="-Xint"
			progarg="int" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.MultiContextBenchmarkTest"
			/>
	</target>
	
	<target name="test-junit"
			depends="compile,compile-test"
			description="Run JUnit tests, generate HTML report."
		>
		<mkdir dir="${test.results.dir}"/>
		<junit printsummary="withOutAndErr" haltonfailure="no">
			<classpath>
				<pathelement path="${junit.jar.path}"/>
				<pathelement path="${hamcrest.jar.path}" />
				<pathelement path="${test.classes.build.dir}"/>
				<pathelement path="${classes.build.dir}"/>
			</classpath>
			<jvmarg value="-Dubench.classpath=${test.classes.build.dir}${path.separator}${classes.build.dir}" />
			<jvmarg value="-Dubench.agent=${agent.path}" />
			<jvmarg value="-agentpath:${agent.path}" />
			
			<assertions>
				<enable/>
			</assertions>
			
			<formatter type="plain" />
			<formatter type="xml" />
			
			<batchtest fork="yes" todir="${test.results.dir}">
				<fileset dir="${test.classes.build.dir}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${test.results.dir}">
			<fileset dir="${test.results.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${test.results.dir}/html"/>
		</junitreport>
	</target>
	
	<target name="demo"
		depends="compile,compile-demo"
		description="Run simple demo (measure md5 speed)."
		>
		<java
				classname="cz.cuni.mff.d3s.perf.demo.MeasureHashing"
				fork="true"
				failonerror="true">
			<classpath>
				<pathelement path="${classes.build.dir}" />
				<pathelement path="${demo.classes.build.dir}" />
			</classpath>
			<jvmarg value="-agentpath:${agent.path}" />
			<arg value="build.xml" />
		</java>
	</target>
	
	<target name="demo-context"
		depends="compile,compile-demo"
		description="Run simple demo (measure md5 speed)."
		>
		<java
				classname="cz.cuni.mff.d3s.perf.demo.MultiContextMeasureHashing"
				fork="true"
				failonerror="true">
			<classpath>
				<pathelement path="${classes.build.dir}" />
				<pathelement path="${demo.classes.build.dir}" />
			</classpath>
			<jvmarg value="-agentpath:${agent.path}" />
			<arg value="build.xml" />
		</java>
	</target>


	<target name="dist"
			description="Create distributable ZIP with all sources."
		>
		<mkdir dir="${build.dir}" />
		<zip destfile="${build.dir}/${dist.name}.zip">
			<zipfileset dir="src" prefix="${dist.name}/src" />
			<zipfileset dir="lib" prefix="${dist.name}/lib" />
			<zipfileset file="build.xml" prefix="${dist.name}/" />
			<zipfileset file="LICENSE.txt" prefix="${dist.name}/" />
			<zipfileset file="README.md" prefix="${dist.name}/" />
		</zip>
	</target>


	<target name="clean"
			description="Remove generated files."
		>
		<delete dir="${classes.build.dir}" />
		<delete dir="${build.dir}" />
	</target>
</project>
